# ****************************************************************************************************
# ****************************************************************************************************
#
#										8008 Cycle Emulation
#										====================
#
#	Ref: 	Scelbi 8-H User's Manual (Nat Wadsworth)
#			8008 Datasheet
#
#
#	Display information comes from Table 2 Page 65 of the 8-H Users Manual
#
# ****************************************************************************************************
# ****************************************************************************************************
#
#	@mem 		hl value
#	@r 			@a,@b,@c,@d,@e,@h,@l,@m 		on (@r / shift) and 7
#	@abcdehl 	whatever it actually is.
#	@pc 		current program counter value
#	@carry 		carry flag
#	@psz 		value used for checking psz
#	@n 			condition name (nc,nz,p,po,c,z,m,pe) from bits 3,4,5
#	@t 			code that tests above condition
#	@rst 		restart address as 2 digit hex
#	@port 		port address as 2 digit hex.
#
#	@cycles(n)	advance n cycles
#	@fetch8() 	fetch byte into MB
#	@fetch16()	fetch word into MA
#	@read()		read MA -> MB
#	@write()	write MB -> MA
#	@add() 		MB,CARRY := (A + MB + CARRY)
#	@sub() 		MB,CARRY := (A - MB - CARRY)
#	@goto()		Jump to MA
#	@push() 	Push PC on stack
#	@pop() 		Pop PC off stack
#	@input(p)	Read port p into acc
#	@output(p,n) Write n to port p
#	@halt()		Halt code.
#
# ****************************************************************************************************
#					Load Data from One CPU Register to another CPU Register
# ****************************************************************************************************

C0..C6 			5		"mov a,@r"
	1:[0,0,@pc,mb]		@a = @r

C8..CE 			5		"mov b,@r"
	1:[0,0,@pc,mb]		@b = @r

D0..D6 			5		"mov c,@r"
	1:[0,0,@pc,mb]		@c = @r

D8..DE 			5		"mov d,@r"
	1:[0,0,@pc,mb]		@d = @r

E0..E6 			5		"mov e,@r"
	1:[0,0,@pc,mb]		@e = @r

E8..EE 			5		"mov h,@r"
	1:[0,0,@pc,mb]		@h = @r

F0..F6 			5		"mov l,@r"
	1:[0,0,@pc,mb]		@l = @r

# ****************************************************************************************************
#						 Load Data From a CPU Register to a Location in Memory
# ****************************************************************************************************

F8..FE 			7 		"mov m,@r"
	1:[*,*,@mem,mb]		ma = @mem;mb = @r
	2:[0,0,@pc,mb]		@write()

# ****************************************************************************************************
#						Load Data from a Location in Memory into a CPU Register
# ****************************************************************************************************

C7..F7,8 		8 		"mov @r,m"
	1:[*,*,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@r = mb

# ****************************************************************************************************
#								Load "Immediate" Data into a CPU Register
# ****************************************************************************************************

06..36,8 		8 		"mvi @r,$1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb] 		@r = mb

# ****************************************************************************************************
#							  Load "Immediate" Data into a location in memory
# ****************************************************************************************************

3E				9 		"mvi m,$1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[*,*,@mem,mb]		ma = @mem
	3:[0,0,@pc,mb]		@write()

# ****************************************************************************************************
#							  	Increment or Decrement a CPU Register
# ****************************************************************************************************

08..30,8		5 		"inr @r"
	1:[0,0,@pc,mb]		@r = (@r + 1) & 0xFF;@psz = @r

09..31,8		5 		"dcr @r"
	1:[0,0,@pc,mb]		@r = (@r + 255) & 0xFF;@psz = @r

# ****************************************************************************************************
#				Arithmetic operation between the accumulator and a CPU Register
# ****************************************************************************************************

80..86 			5 		"add @r"
	1:[0,0,@pc,mb]		mb = @r;@carry = 0;@add();@psz = mb;@a = mb

88..8E 			5 		"adc @r"
	1:[0,0,@pc,mb]		mb = @r;@add();@psz = mb;@a = mb

90..96 			5 		"sub @r"
	1:[0,0,@pc,mb]		mb = @r;@carry = 0;@sub();@psz = mb;@a = mb

98..9E 			5 		"sbb @r"
	1:[0,0,@pc,mb]		mb = @r;@sub();@psz = mb;@a = mb

# ****************************************************************************************************
#						Compare between the accumulator and a CPU Register
# ****************************************************************************************************

B8..BE 			5 		"cmp @r"
	1:[0,0,@pc,mb]		mb = @r;@carry = 0;@sub();@psz = mb

# ****************************************************************************************************
#				Arithmetic or Compare instruction between the accumulator and memory
# ****************************************************************************************************

87				8 		"add m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@carry = 0;@add();@psz = mb;@a = mb

8F				8 		"adc m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@add();@psz = mb;@a = mb

97				8 		"sub m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@carry = 0;@sub();@psz = mb;@a = mb

9F				8 		"sbb m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@sub();@psz = mb;@a = mb

BF				8 		"cmp m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@carry = 0;@sub();@psz = mb

# ****************************************************************************************************
#					"Immediate" type Arithmetic or Compare instructions
# ****************************************************************************************************

04 				8 		"adi $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@carry = 0;@add();@psz = mb;@a = mb

0C 				8 		"aci $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@add();@psz = mb;@a = mb	

14 				8 		"sui $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@carry = 0;@sub();@psz = mb;@a = mb

1C 				8 		"sbi $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@sub();@psz = mb;@a = mb		

3C 				8 		"cpi $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@carry = 0;@sub();@psz = mb

# ****************************************************************************************************
# 				Boolean Math Operations between Accumulator and CPU Registers
# ****************************************************************************************************

A0..A6 			5 		"ana @r"
	1:[0,0,@pc,mb]		@a = @a & @r;@carry = 0

A8..AE 			5 		"xra @r"
	1:[0,0,@pc,mb]		@a = @a ^ @r;@carry = 0

B0..B6 			5 		"ora @r"
	1:[0,0,@pc,mb]		@a = @a | @r;@carry = 0


# ****************************************************************************************************
# 			 Boolean Math Operations between Accumulator and a location in memory
# ****************************************************************************************************

A7 				8 		"ana m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@a = @a & mb;@carry = 0

AF 				8 		"xra m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@a = @a ^ mb;@carry = 0

B7 				8 		"ora m"
	1:[*,0,@mem,mb]		ma = @mem;@read()
	2:[0,0,@pc,mb]		@a = @a | mb;@carry = 0

# ****************************************************************************************************
# 			 						Boolean "Immediate" Instructions
# ****************************************************************************************************

24 				8 		"ani $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@a = @a & mb;@carry = 0

2C 				8 		"xri $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@a = @a ^ mb;@carry = 0

34 				8 		"ori $1"
	1:[*,0,@pc,mb]		@fetch8()
	2:[0,0,@pc,mb]		@a = @a | mb;@carry = 0

# ****************************************************************************************************
#								Accumulator Rotate Instructions
# ****************************************************************************************************

02 				5		"rlc"
	1:[0,0,@pc,mb]		@a = ((@a << 1) | (@a >> 7)) & 0xFF;@carry = @a & 1

0A 				5		"rrc"
	1:[0,0,@pc,mb]		@carry = @a & 1;@a = ((@a >> 1) | (@a << 7)) & 0xFF

12 				5		"ral"
	1:[0,0,@pc,mb]		ma = @a;ma = (ma << 1) | @carry;@carry = (ma >> 8) & 1;@a = ma & 0xFF

1A 				5		"rar"
	1:[0,0,@pc,mb] 		ma = @a | (carry << 8);@carry = ma & 1;@a = (ma >> 1) & 0xFF

# ****************************************************************************************************
#								Unconditional Jump or Call Instructions
# ****************************************************************************************************

44..7C,8 		11 		"jmp $2"
	1:[*,0,@pc,mb]		@fetch16()
	2:[*,0,@pc-1,ma & 0xFF]	@goto()
	3:[0,0,@pc,ma >> 8]	;

46..7E,8 		11 		"call $2"
	1:[*,0,@pc,mb]		@fetch16()
	2:[*,0,@pc-1,ma & 0xFF]	@push();@goto()
	3:[0,0,@pc,ma >> 8]	;

# ****************************************************************************************************
#								Conditional Jump or Call Instructions
# ****************************************************************************************************

40..78,8 		10 		"j@n $2"
	1:[*,0,@pc,mb]		@fetch16()
	2:[*,0,@pc-1,ma & 0xFF]	if (@test) { @goto(); }
	3:[0,0,@pc,ma >> 8]	;

42..7A,8 		10 		"c@n $2"
	1:[*,0,@pc,mb]		@fetch16()
	2:[*,0,@pc-1,ma & 0xFF]	if (@test) { @push();@goto(); }
	3:[0,0,@pc,ma >> 8]	;

# ****************************************************************************************************
#									Unconditional Return Instruction
# ****************************************************************************************************

07..3F,8 		5		"ret"
	1:[0,0,@pc,mb]		@pull()

# ****************************************************************************************************
#									 Conditional Return Instruction
# ****************************************************************************************************

03..3B,8 		4 		"r@n"
	1:[0,0,@pc,mb]		if (@test) { @pull(); }

# ****************************************************************************************************
#										    Restart Instruction
# ****************************************************************************************************

05..3D,8 		5 		"rst @rst"
	1:[0,0,0x@rst,mb]	@push();ma = 0x@rst;@goto();

# ****************************************************************************************************
#										     Output Instruction
# ****************************************************************************************************

51..7F,2 		6 		"out @port"
	1:[0,*,0x@port,@a]	@output(0x@port,@a)
	2:[0,0,@pc,@a]		;

# ****************************************************************************************************
#										     Input Instruction
# ****************************************************************************************************

41..4F,2 		8 		"inp @port"
	1:[0,*,0x@port,@a] 	@input(0x@port)
	2:[0,0,@pc,@a]		;

# ****************************************************************************************************
#										     Halt Instruction
# ****************************************************************************************************

00..01 			4 		"halt"
	1:[0,0,@addr,mb]	@halt()

FF 				4 		"halt"
	1:[0,0,@addr,mb]	@halt()

