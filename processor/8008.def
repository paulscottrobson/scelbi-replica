# ****************************************************************************************************
# ****************************************************************************************************
#
#										8008 Cycle Emulation
#										====================
#
#	Ref: 	Scelbi 8-H User's Manual (Nat Wadsworth)
#			8008 Datasheet
#
#
#	Memory Cycle #1 has a FETCH in T1,T2,T3.
#
# ****************************************************************************************************
# ****************************************************************************************************
#
#	@r 		opcode/shift & 7		a,b,c,d,e,h,l,m
#	@addr  	rst addr in hex 2 digits
#	@port 	port addr in hex 2 digits
#	@mahl 	copy hl to ma.
#	@goto 	pc := temp16 & 0x3FFF
#	@test 	conditional test (on bits 3,4,5)
#	@tname	conditional test name (on bits 3,4,5)
#	@push 	push pc on stack
#	@pull	pull pc off stack
#
#	fetch()	pc -> ma ; read() ; pc++ / or read from keys in interrupt mode (?)
#	read()	read memory
#	write()	write memory
#
# ****************************************************************************************************
#									Index Register Instructions
# ****************************************************************************************************

C0-C6 		5 		"mov a,@r"
	1:		a = @r

C8-CE 		5 		"mov b,@r"
	1:		b = @r

D0-D6 		5 		"mov c,@r"
	1:		c = @r

D8-DE 		5 		"mov d,@r"
	1:		d = @r

E0-E6 		5 		"mov e,@r"
	1:		e = @r

E8-EE 		5 		"mov h,@r"
	1:		h = @r

F0-F6 		5 		"mov l,@r"
	1:		l = @r

# ----------------------------------------------------------------------------------------------------

C7-F7,8 	8 		"mov @r,m"
	1:
	2:  	@mahl ; read() ; @r = mb 

F8-FE 		7 		"mov m,@r"
	1:
	2:		@mahl ; mb = @r ; write()

# ----------------------------------------------------------------------------------------------------

06-36,8 	8 		"mvi @r,$1"
	1:
	2:		fetch() ; @r = mb 

3E 			9 		"mvi m,$1"
	1:
	2:		fetch() ; read()
	3:		@mahl ; write()

# ----------------------------------------------------------------------------------------------------

08-30,8 	5 		"inr @r"
	1:		@r = pszValue = (@r + 1) & 255

09-31,8 	5 		"dcr @r"
	1:		@r = pszValue = (@r + 255) & 255

# ****************************************************************************************************
#								Accumulator Group Instructions
# ****************************************************************************************************

80-86 		5 		"add @r"
	1:		add(a,@r,0);a = pszValue

88-8E 		5 		"adc @r"
	1:		add(a,@r,carry);a = pszValue

90-96 		5 		"sub @r"
	1:		sub(a,@r,0);a = pszValue

98-9E 		5 		"sbb @r"
	1:		sub(a,@r,carry);a = pszValue

A0-A6 		5 		"and @r"
	1:		a = pszValue = a & @r ; carry = 0

A8-AE 		5 		"xra @r"
	1:		a = pszValue = a ^ @r ; carry = 0

B0-B6 		5 		"ora @r"
	1:		a = pszValue = a | @r ; carry = 0

B8-BE 		5 		"cmp @r"
	1:		sub(a,@r,0)

# ----------------------------------------------------------------------------------------------------

87 			8 		"add m"
	1:	
	2:		@mahl ; read() ; add(a,@r,0); a = pszValue

8F 			8 		"adc m"
	1:	
	2:		@mahl ; read() ; add(a,@r,carry); a = pszValue

97 			8 		"sub m"
	1:	
	2:		@mahl ; read() ; sub(a,@r,0); a = pszValue

9F 			8 		"sbb m"
	1:	
	2:		@mahl ; read() ; sub(a,@r,carry); a = pszValue

A7 			8 		"and m"
	1:	
	2:		@mahl ; read() ;  a = pszValue = a & mb ; carry = 0

AF 			8 		"xra m"
	1:	
	2:		@mahl ; read() ;  a = pszValue = a ^ mb ; carry = 0

B7 			8 		"ora m"
	1:	
	2:		@mahl ; read() ;  a = pszValue = a | mb ; carry = 0

BF 			8 		"cmp m"
	1:	
	2:		@mahl ; read() ; sub(a,@r,0)

# ----------------------------------------------------------------------------------------------------

04 			8 		"adi $1"
	1:	
	2:		fetch() ; add(a,mb,0) ; a = pszValue

0C 			8 		"aci $1"
	1:	
	2:		fetch() ; add(a,mb,carry) ; a = pszValue

14 			8 		"sui $1"
	1:	
	2:		fetch() ; sub(a,mb,0) ; a = pszValue

1C 			8 		"sbi $1"
	1:	
	2:		fetch() ; sub(a,mb,carry) ; a = pszValue

24 			8 		"ani $1"
	1:	
	2:		fetch() ; a = pszValue = a & mb ; carry = 0

2C 			8 		"xri $1"
	1:	
	2:		fetch() ; a = pszValue = a ^ mb ; carry = 0

34 			8 		"ori $1"
	1:	
	2:		fetch() ; a = pszValue = a | mb ; carry = 0

3C 			8 		"cpi $1"
	1:	
	2:		fetch() ; sub(a,mb,0) 

# ----------------------------------------------------------------------------------------------------

02 			5 		"rlc"
	1:		carry = (a >> 7) & 1;a = ((a << 1) & 255) | carry

0A 			5 		"rrc"
	1:		carry = a & 1;a = (a >> 1) | (carry << 7)

12 			5 		"ral"
	1:		temp16 = (a << 1) | carry; a = temp16 & 255;carry = (temp16 >> 8) & 1

1A 			5 		"rar"
	1:		temp16 = a | (carry << 8);a = (temp16 >> 1) & 255;carry = temp16 & 1

# ****************************************************************************************************
#								Program Counter and Stack Control Operations
# ****************************************************************************************************

44-7C,8 	11 		"jmp $2"
	1:		
	2:		fetch(); temp16 = mb
	3:		fetch(); temp16 = (mb << 8) | temp16 ; @goto

40-78,8 	10		"j@tname $2"
	1:		
	2:		fetch(); temp16 = mb
	3:		fetch(); temp16 = (mb << 8) | temp16 ; if (@test) { @goto; }

46-7E,8 	11 		"call $2"
	1:		
	2:		fetch(); temp16 = mb
	3:		fetch(); temp16 = (mb << 8) | temp16 ; @push; @goto

42-7A,8 	10		"c@tname $2"
	1:		
	2:		fetch(); temp16 = mb
	3:		fetch(); temp16 = (mb << 8) | temp16 ; if (@test) { @push; @goto; }

07-3F,8 	5 		"ret"
	1:		@pull

03-3B,8 	4 		"r@tname"
	1:		if (@test) { @pull; }

05-3D,8 	5 		"rst @addr"	
	1:		temp16 = 0x@addr ; @push ; @goto

# ****************************************************************************************************
#											I/O Instructions
# ****************************************************************************************************

41-4F,2 	8 		"inp @port"
	1:
	2:		ma = (0x@port << 8) | a;a = mb = inputPort(0x@port)

51-7F,2 	8 		"out @port"
	1:
	2:		ma = (0x@port << 8) | a;mb = a;outputPort(0x@port,a)

# ****************************************************************************************************
#										  Machine Instructions
# ****************************************************************************************************

00-01 		4 		"hlt"
	1:		halt = 1

FF 			4 		"hlt"
	1: 		halt = 1